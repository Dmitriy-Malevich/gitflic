# ======= Конфигурация сервера =======

# Дефолтное значение порта 8080
server.port=${SERVER_PORT}
# Дефолтное значение адреса localhost
#server.address=localhost
# При необходимости так же можно указать порт, на котором будет запущен SSH сервер для работы
# SSH транспорта git. Дефолтное значение порта 22
ssh.server.port=${SSH_SERVER_PORT}

# С помощью свойст spring.servlet.multipart.maxFileSize и spring.servlet.multipart.maxRequestSize можно ограничить
# как размер загружаемых файлов в формах и запросах api, так и размер самого запроса.
# Стандартное значение для обоих свойст 500MB
#spring.servlet.multipart.maxFileSize=500MB
#spring.servlet.multipart.maxRequestSize=500MB


# ======= Конфигурация базы данных =======

# Необходимо указать url для подключения к базе данных и пользователя с паролем
spring.datasource.url=jdbc:postgresql://${POSTGRES_CONTAINER_NAME}/${POSTGRES_DB}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASS}


# ======= Конфигурация Redis =======

# Необходимо указать хост, порт (если редис запущен не на стандартном порте 6379),
# юзернейм и пароль
spring.redis.host=${REDIS_HOST}
spring.redis.port=${REDIS_PORT}
#spring.redis.username=user
#spring.redis.password=
# При необходимости можно указать номер базы данных
#spring.redis.database=0
# Если редис находится не в локальном контуре, а обращаться к нему необходимо через https протокол,
# то возможно указать свойство spring.redis.ssl. Стандартное значение данного параметра false
#spring.redis.ssl=true

# Так же возможно указать полный URL для соедниенения с редисом.
# Если указан URL для соединения, то параметры host, port, и password будут перезаписаны из URL.
# Параметр user будет проигнорирован. Пример URL: redis://user:password@example.com:6379
#spring.redis.url=redis://user:redis@redis:6379


# ======= Настройки дирректорий, используемых для работы приложения =======

# Свойство repository.dir указывает папку, где должны хранится репозитории git,путь к дирректории должен заканчиваться на /
repository.dir=${REPO_DIR}

# Свойство image.upload.dir указывает папку, где должны хранится аватары и иные медиа файлы
image.upload.dir=${IMG_DIR}

# Свойство releases.upload.dir указывает папку, где должны хранится файлы, которые прикложены к релизу на основе тегов git
releases.upload.dir=${RELEASES_DIR}

# Параметр ssh.server.cert отвечает за путь к сертификату, который используется для ssh транспорта
ssh.server.cert=${SSH_CERT}

# CICD 
cicd.pipeline.dir=${CICD_DIR}

#Параметр gitflic.registry.package.dir отвечает за путь для файлов реестра пакетов
gitflic.registry.package.dir=${REG_PACK_DIR}

# ======= Настройка SMTP сервера =======

# Данная настройка является обязательной для работы приложения.
# Без настройки smtp сервера приложение не сможет отправлять письма как минимум для регистрации пользователей

spring.mail.host=${EMAIL_SMTP_HOST}
spring.mail.port=${EMAIL_SMTP_PORT}
spring.mail.username=${EMAIL_USER}
spring.mail.password=${EMAIL_PASS}
spring.mail.properties.mail.smtp.ssl.enable=true
spring.mail.properties.mail.smtp.auth=true

# Для дебага
spring.mail.properties.mail.debug = false
# Имя отправителя в письме
smtp.sender.name=${SENDER_NAME}
# От кого, должен совпадать с username
smtp.sender.email=${SENDER_EMAIL}

# ======= Общие свойства приложения =======

# Свойство gitflic.base.url должно содержать в себе домен или хост, на котором запущено приложения.
# Данное свойство используется при генерации ссылок для внешних источников, например для ссылок в письмах.
gitflic.base.url=${GITFLIC_BASE_URL}

# Свойство gitflic.transport.url должно содержать в себе домен или хост, по которому осуществляется транспорт данных
# в git репозиторий. Стандартное значение для данного параметра localhost.
# Данный параметр используется для генерации урла, который отображается на странице каждого проекта и приходит в данных
# в из методов API и в данных вебхуков.
# Есть некоторые нюансы в генерации урлов для ssh транспорта, так как порт, по которому осуществляется биндинг ssh сервера
# стандартный (22), но может быть изменен, то вариант урла (например) git@gitflic.ru:vault/zookeeper.git с нестандартными
# настройками работать не будет. В таком случае необходимо настроить проксисервер (например HaProxy), для того
#  чтобы внешние обращения были перенапрвлены на указанный в приложении порт.
# Плюс если указать в значении урла порт (например localhost:8080), то для ssh транспорта будет сгенерирован
# урл git@localhost:vault/zookeeper.git без указанного порта
gitflic.transport.url=${GITFLIC_TRANSPORT_URL}

#Параметр gitflic.defaultPackSize ограничивает максимальный размер пакета, который гит может отправить во время пуша в
#репозиторий. Стандартное значение 100MB. Данное поле имеет тип String. Возможны следующие суффиксы KB, MB, GB, TB.
#gitflic.defaultPackSize=100MB

#Свойство gitflic.limitPackSize используется для включения и отключения механизма ограничения максимального размера
#пакета при пуше. Если данный параметр имеет значение true, то настройка конкретного проекта происходит через настройки
#компании в администраторской панели. Стандартное значение false.
#gitflic.limitPackSize=true

#Свойство gitflic.limitProjectSize использется для включения и отключения механизма ограничения максимального размера
#репозитория. Если данное значение имеет значение true, то настройка конретного проекта происходит через настройки проекта
#в панеле администрирования. Стандартное значение false.
#gitflic.limitProjectSize=true


# ======= Настройки логирования =======

# Настройки название и пути файла логов
# Свойтво logging.file.name должно сожержать в себе название файла. Стандартное значение server.log.
# Название файла может содержать в себе как относительный путь к дирректиории из которой происходит запуска приложения
# так и точный путь, если он начичнается с /
# Обратите внимание, что на каждый запущенный инстанс можно указать свой файл логов, в ином случае будет использован один
# файл для всех инстансов
logging.file.name=${LOG_NAME}
# С помощью свойства logging.file.path можно указать дирректорию для файла логов.
logging.file.path=${LOG_PATH}

# Настройки уровня логирования
# Дефолтное значение INFO
#logging.level.root=DEBUG
